{
  "issueUpdates": [
    {
      "comment": "==================== PERSONA-1: FOUNDATION (5 tickets - 12h) ====================",
      "description": "Persona-1 establece las bases técnicas críticas del proyecto. Todos los demás equipos dependen de que esta foundation esté completa."
    },

    {
      "fields": {
        "project": { "key": "ECOM" },
        "issuetype": { "name": "Task" },
        "summary": "PERSONA-1 | Ticket 1/5 | Estructura mínima y convenciones del proyecto",
        "description": {
          "type": "doc",
          "version": 1,
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Contexto (para juniors): Este ticket crea la forma básica del proyecto con carpetas simples y nombres claros. HTML semántico = etiquetas que explican su función (header, main, footer). DOM = Document Object Model, el árbol de nodos que el navegador construye del HTML.\nObjetivo (qué y por qué): Tener una estructura limpia y fácil de entender para que el equipo trabaje ordenado desde el inicio.\nAlcance (límites del MVP): Solo carpetas y archivos iniciales. Nada de frameworks ni build tools.\nPasos detallados (paso a paso):\n1) Crear carpetas: assets/img, assets/css, assets/js, pages.\n2) Crear archivos vacíos: index.html, pages/catalogo.html, pages/producto.html, pages/carrito.html, pages/checkout.html, assets/css/styles.css, assets/js/app.js.\n3) En index.html agregar doctype, html lang es, meta viewport y un h1 de prueba.\nCriterios de aceptación (claros y verificables, ≥3):\n- Existen las carpetas assets/img, assets/css, assets/js y pages.\n- index.html tiene <!doctype html>, lang es y meta viewport.\n- Hay un h1 visible con texto Tienda.\nValidaciones y casos negativos (≥2, simples):\n- No hay nombres con espacios o mayúsculas (usar kebab-case).\n- No hay archivos innecesarios ni carpetas vacías extra.\nComprobación manual (cómo validar): Abrir index.html en el navegador y ver el h1; revisar en el explorador de archivos la estructura creada.\nNotas de accesibilidad (foco, ARIA mínima si aplica): Usar lang es; planear textos alternativos para imágenes más adelante.\nNotas responsive (Tailwind): Agregar meta viewport para que Tailwind funcione bien en móviles.\nDefinición de listo (DoD):\n- Código revisado\n- Pruebas manuales básicas pasan\n- Sin errores en consola\nResponsable sugerido: persona-1\nEstimación (horas): 2\nOrden sugerido (1..5 en su grupo): 01"
                }
              ]
            }
          ]
        },
        "labels": [
          "mvp",
          "area-estructura",
          "grupo-foundation",
          "persona-1",
          "order-01",
          "est-2h"
        ]
      }
    },

    {
      "fields": {
        "project": { "key": "ECOM" },
        "issuetype": { "name": "Task" },
        "summary": "PERSONA-1 | Ticket 2/5 | Integrar Tailwind (Play CDN) y guía básica de utilidades",
        "description": {
          "type": "doc",
          "version": 1,
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Contexto (para juniors): Tailwind es un sistema de clases utilitarias. Usaremos Play CDN para evitar configuración.\nObjetivo (qué y por qué): Tener Tailwind listo y una guía mínima de colores, tipografía, espaciado y breakpoints para usar igual en todas las páginas.\nAlcance (límites del MVP): Solo incluir el script de CDN y un bloque de guía en index.html.\nPasos detallados (paso a paso):\n1) En el <head> de index.html agregar <script src='https://cdn.tailwindcss.com'></script> y meta viewport si falta.\n2) Agregar una sección de guía con ejemplos: texto con clases text-xl font-semibold, colores bg-blue-600 text-white, espaciado p-4 m-4.\n3) Documentar breakpoints de ejemplo: sm, md, lg y una grid simple grid-cols-1 md:grid-cols-2.\nCriterios de aceptación (claros y verificables, ≥3):\n- El navegador aplica clases Tailwind (ejemplo text-xl visible).\n- Existe sección de guía con al menos 3 tipos de utilidades (color, tipografía, espaciado).\n- No hay errores en consola al cargar la página.\nValidaciones y casos negativos (≥2, simples):\n- Si falta el script de Tailwind, las clases no tienen efecto.\n- Si el meta viewport no está, en móvil se ve escalado incorrecto.\nComprobación manual (cómo validar): Abrir index.html, inspeccionar elementos y confirmar que las clases se aplican.\nNotas de accesibilidad (foco, ARIA mínima si aplica): Asegurar contraste suficiente (ejemplo texto blanco sobre azul 600).\nNotas responsive (Tailwind): Probar sm y md en DevTools para ver cambios de grid y tipografía.\nDefinición de listo (DoD):\n- Código revisado\n- Pruebas manuales básicas pasan\n- Sin errores en consola\nResponsable sugerido: persona-1\nEstimación (horas): 2\nOrden sugerido (1..5 en su grupo): 02"
                }
              ]
            }
          ]
        },
        "labels": [
          "mvp",
          "area-estructura",
          "grupo-foundation",
          "persona-1",
          "order-02",
          "est-2h"
        ]
      }
    },

    {
      "fields": {
        "project": { "key": "ECOM" },
        "issuetype": { "name": "Task" },
        "summary": "PERSONA-1 | Ticket 3/5 | Layouts base reutilizables: header, footer y contenedor",
        "description": {
          "type": "doc",
          "version": 1,
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Contexto (para juniors): Un layout es una estructura repetida. Usaremos HTML semántico con clases Tailwind reutilizables.\nObjetivo (qué y por qué): Crear header con nav, contenedor central y footer para copiarlos en todas las páginas.\nAlcance (límites del MVP): Solo HTML y Tailwind; sin JS.\nPasos detallados (paso a paso):\n1) En index.html crear header con nav y enlaces a Inicio, Catálogo, Carrito, Checkout.\n2) Crear contenedor principal con clases container mx-auto px-4 y un main para el contenido.\n3) Crear footer sencillo con texto pequeño text-sm y enlaces de contacto.\nCriterios de aceptación (claros y verificables, ≥3):\n- Header, main y footer visibles y semánticos.\n- El contenedor usa container mx-auto px-4.\n- Los enlaces navegan a páginas existentes.\nValidaciones y casos negativos (≥2, simples):\n- No usar divs innecesarios donde existan etiquetas semánticas.\n- Evitar enlaces rotos o vacíos.\nComprobación manual (cómo validar): Navegar entre páginas y verificar que el layout se ve igual.\nNotas de accesibilidad (foco, ARIA mínima si aplica): Estados de foco visibles en enlaces; aria-current para enlace activo si aplica.\nNotas responsive (Tailwind): Verificar que el contenedor se adapte en móvil y desktop sin overflow.\nDefinición de listo (DoD):\n- Código revisado\n- Pruebas manuales básicas pasan\n- Sin errores en consola\nResponsable sugerido: persona-1\nEstimación (horas): 3\nOrden sugerido (1..5 en su grupo): 03"
                }
              ]
            }
          ]
        },
        "labels": [
          "mvp",
          "area-estructura",
          "grupo-foundation",
          "persona-1",
          "order-03",
          "est-3h"
        ]
      }
    },

    {
      "fields": {
        "project": { "key": "ECOM" },
        "issuetype": { "name": "Task" },
        "summary": "PERSONA-1 | Ticket 4/5 | Componente Tarjeta de producto (HTML + Tailwind) sin JS",
        "description": {
          "type": "doc",
          "version": 1,
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Contexto (para juniors): Una tarjeta muestra una vista previa del producto. Reutilizaremos su HTML en catálogo y otros lugares.\nObjetivo (qué y por qué): Construir una tarjeta clara con imagen, título, precio y botón.\nAlcance (límites del MVP): Solo HTML y Tailwind; sin lógica.\nPasos detallados (paso a paso):\n1) Crear estructura article con clases border rounded-lg shadow p-4 bg-white.\n2) Dentro, img con alt descriptivo, h3 para título y p para precio con font-semibold.\n3) Agregar botón Agregar al carrito con clases bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded.\nCriterios de aceptación (claros y verificables, ≥3):\n- La tarjeta usa etiquetas article, img (con alt), h3 y botón.\n- Se aplican clases Tailwind de borde, sombra y espaciado.\n- El botón es visible y tiene estado hover.\nValidaciones y casos negativos (≥2, simples):\n- Imagen sin alt no es válido.\n- Texto de precio debe ser legible y no muy pequeño.\nComprobación manual (cómo validar): Insertar 3 tarjetas de ejemplo en index y revisar estilos.\nNotas de accesibilidad (foco, ARIA mínima si aplica): Botón con foco visible; usar aria-label si el texto no es claro.\nNotas responsive (Tailwind): Tarjetas en grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 con gap-4.\nDefinición de listo (DoD):\n- Código revisado\n- Pruebas manuales básicas pasan\n- Sin errores en consola\nResponsable sugerido: persona-1\nEstimación (horas): 2\nOrden sugerido (1..5 en su grupo): 04"
                }
              ]
            }
          ]
        },
        "labels": [
          "mvp",
          "area-producto",
          "grupo-foundation",
          "persona-1",
          "order-04",
          "est-2h"
        ]
      }
    },

    {
      "fields": {
        "project": { "key": "ECOM" },
        "issuetype": { "name": "Task" },
        "summary": "PERSONA-1 | Ticket 5/5 | JS mínimo de carrito: helpers localStorage y eventos click",
        "description": {
          "type": "doc",
          "version": 1,
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Contexto (para juniors): Usaremos localStorage para guardar el carrito en el navegador. localStorage guarda pares clave-valor en texto.\nObjetivo (qué y por qué): Crear funciones simples add, remove y count y enlazarlas a botones de tarjetas.\nAlcance (límites del MVP): JS básico en assets/js/app.js; sin librerías.\nPasos detallados (paso a paso):\n1) Implementar helpers: getCart, saveCart, addToCart(id), removeFromCart(id), countCart().\n2) Agregar data-product-id a botones y escuchar clicks para addToCart.\n3) Mostrar el total de ítems en un span del header actualizado con countCart.\nCriterios de aceptación (claros y verificables, ≥3):\n- Se crea la clave cart en localStorage con un arreglo JSON.\n- El contador en el header muestra la cantidad actual.\n- removeFromCart elimina por id.\nValidaciones y casos negativos (≥2, simples):\n- Si el carrito no existe, getCart devuelve arreglo vacío.\n- Evitar romper si id es desconocido.\nComprobación manual (cómo validar): Click en Agregar al carrito varias veces y ver contador; inspeccionar Application > Local Storage.\nNotas de accesibilidad (foco, ARIA mínima si aplica): Botones con aria-pressed si se usa toggle; foco visible.\nNotas responsive (Tailwind): El contador debe verse en mobile y desktop (clases text-sm md:text-base).\nDefinición de listo (DoD):\n- Código revisado\n- Pruebas manuales básicas pasan\n- Sin errores en consola\nResponsable sugerido: persona-1\nEstimación (horas): 3\nOrden sugerido (1..5 en su grupo): 05"
                }
              ]
            }
          ]
        },
        "labels": [
          "mvp",
          "area-carrito",
          "grupo-foundation",
          "persona-1",
          "order-05",
          "est-3h"
        ]
      }
    },

    {
      "comment": "==================== PERSONA-2: LANDING/PRESENTACIÓN (5 tickets - 9h) ====================",
      "description": "Persona-2 se enfoca en la experiencia de usuario y presentación del sitio. Trabajo independiente de equipos 3 y 4."
    },

    {
      "fields": {
        "project": { "key": "ECOM" },
        "issuetype": { "name": "Task" },
        "summary": "PERSONA-2 | Ticket 1/5 | Landing: hero simple con llamada a la acción",
        "description": {
          "type": "doc",
          "version": 1,
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Contexto (para juniors): La landing presenta la tienda y guía al catálogo.\nObjetivo (qué y por qué): Crear un hero con título, texto breve y botón a Catálogo.\nAlcance (límites del MVP): Solo HTML y Tailwind.\nPasos detallados (paso a paso):\n1) En index.html crear sección hero con h1 text-3xl md:text-5xl y texto de apoyo.\n2) Agregar botón Ver catálogo con clases bg-blue-600 hover:bg-blue-700 text-white py-3 px-6 rounded.\n3) Centrar contenido con flex items-center justify-center min-h-[50vh] text-center.\nCriterios de aceptación (claros y verificables, ≥3):\n- El botón navega a pages/catalogo.html.\n- Tipografías y tamaños cambian en md.\n- No hay overflow en móvil.\nValidaciones y casos negativos (≥2, simples):\n- El botón debe ser accesible con teclado.\n- Evitar textos muy largos que rompan el diseño.\nComprobación manual (cómo validar): Click en el botón abre Catálogo; probar en móvil y desktop.\nNotas de accesibilidad (foco, ARIA mínima si aplica): Foco visible en botón; usar aria-label si el texto no es claro.\nNotas responsive (Tailwind): Usar padding responsive px-4 md:px-8 y tamaños de texto escalables.\nDefinición de listo (DoD):\n- Código revisado\n- Pruebas manuales básicas pasan\n- Sin errores en consola\nResponsable sugerido: persona-2\nEstimación (horas): 3\nOrden sugerido (1..5 en su grupo): 01"
                }
              ]
            }
          ]
        },
        "labels": [
          "mvp",
          "area-landing",
          "grupo-team2",
          "persona-2",
          "order-01",
          "est-3h"
        ]
      }
    },

    {
      "fields": {
        "project": { "key": "ECOM" },
        "issuetype": { "name": "Task" },
        "summary": "PERSONA-2 | Ticket 2/5 | Landing: footer simple con enlaces de información y contacto",
        "description": {
          "type": "doc",
          "version": 1,
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Contexto (para juniors): El footer cierra la página con enlaces útiles.\nObjetivo (qué y por qué): Agregar un footer con enlaces a Sobre la tienda, Políticas y contacto mailto.\nAlcance (límites del MVP): HTML + Tailwind; sin JS.\nPasos detallados (paso a paso):\n1) Crear footer con text-sm text-gray-600 py-6.\n2) Lista de enlaces con flex gap-4 y hover:underline.\n3) Agregar texto de derechos reservados.\nCriterios de aceptación (claros y verificables, ≥3):\n- Enlaces visibles y clickeables.\n- Estilos de texto aplicados.\n- Sin solapamientos con el contenido.\nValidaciones y casos negativos (≥2, simples):\n- Enlaces deben tener href válido (por ejemplo mailto).\n- Evitar contraste bajo.\nComprobación manual (cómo validar): Hacer click en enlaces; revisar estilo en móvil.\nNotas de accesibilidad (foco, ARIA mínima si aplica): Foco claro en enlaces.\nNotas responsive (Tailwind): Usar px-4 md:px-8 y centrado container mx-auto.\nDefinición de listo (DoD):\n- Código revisado\n- Pruebas manuales básicas pasan\n- Sin errores en consola\nResponsable sugerido: persona-2\nEstimación (horas): 1\nOrden sugerido (1..5 en su grupo): 02"
                }
              ]
            }
          ]
        },
        "labels": [
          "mvp",
          "area-landing",
          "grupo-team2",
          "persona-2",
          "order-02",
          "est-1h"
        ]
      }
    },

    {
      "fields": {
        "project": { "key": "ECOM" },
        "issuetype": { "name": "Task" },
        "summary": "PERSONA-2 | Ticket 3/5 | Landing: banner promocional con cierre (toggle sencillo)",
        "description": {
          "type": "doc",
          "version": 1,
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Contexto (para juniors): Un banner comunica una oferta simple.\nObjetivo (qué y por qué): Mostrar un banner con texto corto y un botón para cerrarlo (agregar/remover clase hidden).\nAlcance (límites del MVP): HTML, Tailwind y JS mínimo.\nPasos detallados (paso a paso):\n1) Agregar div con clases bg-yellow-100 text-yellow-900 p-3 flex justify-between.\n2) Botón de cierre con aria-label Cerrar y clases px-2.\n3) JS: on click toggle de la clase hidden en el banner.\nCriterios de aceptación (claros y verificables, ≥3):\n- Banner visible al cargar.\n- Botón cierra el banner sin recargar.\n- No aparecen errores en consola.\nValidaciones y casos negativos (≥2, simples):\n- Si el banner está hidden no debe ocupar espacio.\n- El botón debe ser alcanzable con teclado.\nComprobación manual (cómo validar): Click en cerrar y verificar que desaparece; volver a mostrar recargando la página.\nNotas de accesibilidad (foco, ARIA mínima si aplica): aria-label en botón; foco visible.\nNotas responsive (Tailwind): El layout del banner se adapta en sm y md.\nDefinición de listo (DoD):\n- Código revisado\n- Pruebas manuales básicas pasan\n- Sin errores en consola\nResponsable sugerido: persona-2\nEstimación (horas): 1\nOrden sugerido (1..5 en su grupo): 03"
                }
              ]
            }
          ]
        },
        "labels": [
          "mvp",
          "area-landing",
          "grupo-team2",
          "persona-2",
          "order-03",
          "est-1h"
        ]
      }
    },

    {
      "fields": {
        "project": { "key": "ECOM" },
        "issuetype": { "name": "Task" },
        "summary": "PERSONA-2 | Ticket 4/5 | Detalle de producto: plantilla con información y selección de talla",
        "description": {
          "type": "doc",
          "version": 1,
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Contexto (para juniors): La página de detalle muestra información ampliada.\nObjetivo (qué y por qué): Crear producto.html con imagen grande, título, precio, descripción y selector de talla.\nAlcance (límites del MVP): HTML + Tailwind; sin datos dinámicos.\nPasos detallados (paso a paso):\n1) Estructura con main en container mx-auto px-4 grid md:grid-cols-2 gap-6.\n2) Columna izquierda: imagen grande con alt y borde.\n3) Columna derecha: título, precio, select de talla, botón Agregar al carrito.\nCriterios de aceptación (claros y verificables, ≥3):\n- Selector de talla visible y usable.\n- Botón Agregar al carrito presente.\n- Layout de 2 columnas en md.\nValidaciones y casos negativos (≥2, simples):\n- Evitar tamaños de fuente demasiado pequeños.\n- Si falta alt en la imagen, no es válido.\nComprobación manual (cómo validar): Abrir producto.html y revisar la composición.\nNotas de accesibilidad (foco, ARIA mínima si aplica): label asociado al select; foco visible en controles.\nNotas responsive (Tailwind): En móvil, columnas se apilan (grid-cols-1).\nDefinición de listo (DoD):\n- Código revisado\n- Pruebas manuales básicas pasan\n- Sin errores en consola\nResponsable sugerido: persona-2\nEstimación (horas): 3\nOrden sugerido (1..5 en su grupo): 04"
                }
              ]
            }
          ]
        },
        "labels": [
          "mvp",
          "area-producto",
          "grupo-team2",
          "persona-2",
          "order-04",
          "est-3h"
        ]
      }
    },

    {
      "fields": {
        "project": { "key": "ECOM" },
        "issuetype": { "name": "Task" },
        "summary": "PERSONA-2 | Ticket 5/5 | Carrito: botón Vaciar y persistencia al recargar la página",
        "description": {
          "type": "doc",
          "version": 1,
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Contexto (para juniors): Es útil poder vaciar el carrito y que el estado se mantenga.\nObjetivo (qué y por qué): Agregar botón Vaciar carrito que borre localStorage y recargar la vista; mantener estado tras reload.\nAlcance (límites del MVP): JS básico.\nPasos detallados (paso a paso):\n1) Botón Vaciar con clases bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded.\n2) En click, limpiar la clave cart y re-renderizar lista.\n3) En load, leer el carrito y pintar el estado actual.\nCriterios de aceptación (claros y verificables, ≥3):\n- Al hacer click, el carrito queda vacío y se muestra mensaje.\n- Tras recargar, el estado se conserva (vacío o con datos).\n- Sin errores en consola.\nValidaciones y casos negativos (≥2, simples):\n- Si la clave no existe, no debe fallar.\n- Confirmar la acción con window.confirm opcional para evitar errores.\nComprobación manual (cómo validar): Llenar carrito, vaciar y recargar; observar cambios en localStorage.\nNotas de accesibilidad (foco, ARIA mínima si aplica): Botón con foco visible; texto claro en acción destructiva.\nNotas responsive (Tailwind): Alinear botón con contenedor flex justify-end en pantallas grandes.\nDefinición de listo (DoD):\n- Código revisado\n- Pruebas manuales básicas pasan\n- Sin errores en consola\nResponsable sugerido: persona-2\nEstimación (horas): 1\nOrden sugerido (1..5 en su grupo): 05"
                }
              ]
            }
          ]
        },
        "labels": [
          "mvp",
          "area-carrito",
          "grupo-team2",
          "persona-2",
          "order-05",
          "est-1h"
        ]
      }
    },

    {
      "comment": "==================== PERSONA-3: NAVEGACIÓN/CATÁLOGO (5 tickets - 10h) ====================",
      "description": "Persona-3 se enfoca en navegación y exploración de productos. Trabajo independiente de equipos 2 y 4."
    },

    {
      "fields": {
        "project": { "key": "ECOM" },
        "issuetype": { "name": "Task" },
        "summary": "PERSONA-3 | Ticket 1/5 | Navegación semántica: header con enlaces básicos",
        "description": {
          "type": "doc",
          "version": 1,
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Contexto (para juniors): La navegación ayuda a moverse entre páginas.\nObjetivo (qué y por qué): Crear un nav simple con enlaces a Inicio, Catálogo, Carrito y Checkout.\nAlcance (límites del MVP): HTML + Tailwind; sin menús complejos.\nPasos detallados (paso a paso):\n1) En header usar nav y una lista ul con li y a.\n2) Aplicar clases flex gap-4 p-4 bg-gray-100 y estados hover:underline.\n3) Marcar el enlace activo con aria-current y font-semibold.\nCriterios de aceptación (claros y verificables, ≥3):\n- Enlaces funcionan y abren páginas.\n- Estilos de hover visibles.\n- aria-current presente en página activa.\nValidaciones y casos negativos (≥2, simples):\n- Evitar enlaces con href vacío.\n- Asegurar área clickeable suficiente (padding en a).\nComprobación manual (cómo validar): Probar los cuatro enlaces y ver cambio de estilo en activo.\nNotas de accesibilidad (foco, ARIA mínima si aplica): Foco notorio en enlaces; aria-current para activo.\nNotas responsive (Tailwind): En móvil usar text-sm y en md text-base; permitir wrap si hay poco espacio.\nDefinición de listo (DoD):\n- Código revisado\n- Pruebas manuales básicas pasan\n- Sin errores en consola\nResponsable sugerido: persona-3\nEstimación (horas): 1\nOrden sugerido (1..5 en su grupo): 01"
                }
              ]
            }
          ]
        },
        "labels": [
          "mvp",
          "area-landing",
          "grupo-team3",
          "persona-3",
          "order-01",
          "est-1h"
        ]
      }
    },

    {
      "fields": {
        "project": { "key": "ECOM" },
        "issuetype": { "name": "Task" },
        "summary": "PERSONA-3 | Ticket 2/5 | Catálogo: listado de productos estáticos con tarjetas reutilizadas",
        "description": {
          "type": "doc",
          "version": 1,
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Contexto (para juniors): El catálogo muestra varias tarjetas de producto.\nObjetivo (qué y por qué): Crear pages/catalogo.html con una grid de tarjetas usando el componente base.\nAlcance (límites del MVP): Datos estáticos; sin filtros reales.\nPasos detallados (paso a paso):\n1) Crear una grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6 dentro de main.\n2) Repetir 6 a 9 tarjetas con datos de ejemplo (título, precio, imagen).\n3) Enlazar cada tarjeta a pages/producto.html.\nCriterios de aceptación (claros y verificables, ≥3):\n- Mínimo 6 tarjetas visibles.\n- Enlaces a detalle funcionan.\n- Grid responde en sm y md.\nValidaciones y casos negativos (≥2, simples):\n- Evitar imágenes sin alt.\n- No usar textos de precio ambiguos.\nComprobación manual (cómo validar): Abrir catalogo.html y probar enlaces a detalle.\nNotas de accesibilidad (foco, ARIA mínima si aplica): Foco en enlaces de tarjetas.\nNotas responsive (Tailwind): Usar container mx-auto px-4 para márgenes adecuados.\nDefinición de listo (DoD):\n- Código revisado\n- Pruebas manuales básicas pasan\n- Sin errores en consola\nResponsable sugerido: persona-3\nEstimación (horas): 3\nOrden sugerido (1..5 en su grupo): 02"
                }
              ]
            }
          ]
        },
        "labels": [
          "mvp",
          "area-catalogo",
          "grupo-team3",
          "persona-3",
          "order-02",
          "est-3h"
        ]
      }
    },

    {
      "fields": {
        "project": { "key": "ECOM" },
        "issuetype": { "name": "Task" },
        "summary": "PERSONA-3 | Ticket 3/5 | Catálogo: botón Ver más (mostrar más tarjetas sin recargar)",
        "description": {
          "type": "doc",
          "version": 1,
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Contexto (para juniors): Ver más mejora la experiencia sin paginación real.\nObjetivo (qué y por qué): Mostrar 6 tarjetas al inicio y revelar más al pulsar.\nAlcance (límites del MVP): JS mínimo con clases hidden.\nPasos detallados (paso a paso):\n1) Marcar tarjetas extra con hidden al cargar.\n2) Agregar botón Ver más con clases bg-gray-200 hover:bg-gray-300 rounded px-4 py-2.\n3) En click, quitar hidden a las tarjetas ocultas y ocultar el botón.\nCriterios de aceptación (claros y verificables, ≥3):\n- Al inicio se ven 6 tarjetas.\n- Tras click se muestran todas.\n- No hay errores en consola.\nValidaciones y casos negativos (≥2, simples):\n- Si no hay más tarjetas, no mostrar el botón.\n- Evitar múltiples clics que dupliquen contenido.\nComprobación manual (cómo validar): Abrir catálogo, contar tarjetas antes y después del click.\nNotas de accesibilidad (foco, ARIA mínima si aplica): Botón navegable con teclado; aria-expanded opcional.\nNotas responsive (Tailwind): Mantener grid adecuada tras revelar más elementos.\nDefinición de listo (DoD):\n- Código revisado\n- Pruebas manuales básicas pasan\n- Sin errores en consola\nResponsable sugerido: persona-3\nEstimación (horas): 1\nOrden sugerido (1..5 en su grupo): 03"
                }
              ]
            }
          ]
        },
        "labels": [
          "mvp",
          "area-catalogo",
          "grupo-team3",
          "persona-3",
          "order-03",
          "est-1h"
        ]
      }
    },

    {
      "fields": {
        "project": { "key": "ECOM" },
        "issuetype": { "name": "Task" },
        "summary": "PERSONA-3 | Ticket 4/5 | Detalle de producto: galería simple con miniaturas (cambiar imagen)",
        "description": {
          "type": "doc",
          "version": 1,
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Contexto (para juniors): Las miniaturas permiten ver variaciones de la imagen.\nObjetivo (qué y por qué): Al hacer click en una miniatura, cambiar la src de la imagen principal.\nAlcance (límites del MVP): JS mínimo; sin efectos avanzados.\nPasos detallados (paso a paso):\n1) Agregar varias miniaturas pequeñas bajo la imagen grande.\n2) En JS, escuchar click y actualizar la imagen principal.\n3) Resaltar miniatura activa con ring-2 ring-blue-600.\nCriterios de aceptación (claros y verificables, ≥3):\n- Click en miniatura cambia la imagen principal.\n- Miniatura activa queda resaltada.\n- No hay recarga de página.\nValidaciones y casos negativos (≥2, simples):\n- Si falta la imagen, mostrar un placeholder.\n- Manejar miniaturas con la misma imagen sin fallar.\nComprobación manual (cómo validar): Probar clicks en 3 miniaturas y ver cambios.\nNotas de accesibilidad (foco, ARIA mínima si aplica): Miniaturas accesibles con teclado y aria-selected para activa.\nNotas responsive (Tailwind): Miniaturas en fila con flex-wrap en pantallas pequeñas.\nDefinición de listo (DoD):\n- Código revisado\n- Pruebas manuales básicas pasan\n- Sin errores en consola\nResponsable sugerido: persona-3\nEstimación (horas): 2\nOrden sugerido (1..5 en su grupo): 04"
                }
              ]
            }
          ]
        },
        "labels": [
          "mvp",
          "area-producto",
          "grupo-team3",
          "persona-3",
          "order-04",
          "est-2h"
        ]
      }
    },

    {
      "fields": {
        "project": { "key": "ECOM" },
        "issuetype": { "name": "Task" },
        "summary": "PERSONA-3 | Ticket 5/5 | Checkout: formulario con validaciones básicas (sin pagos reales)",
        "description": {
          "type": "doc",
          "version": 1,
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Contexto (para juniors): El checkout solo simula la captura de datos.\nObjetivo (qué y por qué): Crear un formulario con nombre, correo y dirección con validaciones simples.\nAlcance (límites del MVP): HTML + JS mínimo; sin envío real.\nPasos detallados (paso a paso):\n1) Crear inputs con label para nombre, correo y dirección, y un botón Continuar.\n2) Validar required y formato de correo con una expresión simple.\n3) Mostrar mensajes de error debajo del campo con text-red-600 text-sm.\nCriterios de aceptación (claros y verificables, ≥3):\n- No permite continuar si faltan campos requeridos.\n- El correo inválido muestra mensaje.\n- Con datos válidos se puede continuar a resumen.\nValidaciones y casos negativos (≥2, simples):\n- Evitar espacios en blanco como válidos.\n- Manejar correos sin @ como inválidos.\nComprobación manual (cómo validar): Probar campos vacíos, correo inválido y un caso válido.\nNotas de accesibilidad (foco, ARIA mínima si aplica): Asociar label for a id; aria-invalid en campos con error.\nNotas responsive (Tailwind): Formularios con max-w-md mx-auto y espacios gap-4.\nDefinición de listo (DoD):\n- Código revisado\n- Pruebas manuales básicas pasan\n- Sin errores en consola\nResponsable sugerido: persona-3\nEstimación (horas): 3\nOrden sugerido (1..5 en su grupo): 05"
                }
              ]
            }
          ]
        },
        "labels": [
          "mvp",
          "area-checkout",
          "grupo-team3",
          "persona-3",
          "order-05",
          "est-3h"
        ]
      }
    },

    {
      "comment": "==================== PERSONA-4: PRODUCTOS/CARRITO (5 tickets - 11h) ====================",
      "description": "Persona-4 se enfoca en funcionalidad de productos y compras. Trabajo independiente de equipos 2 y 3."
    },

    {
      "fields": {
        "project": { "key": "ECOM" },
        "issuetype": { "name": "Task" },
        "summary": "PERSONA-4 | Ticket 1/5 | Landing: sección de categorías destacadas (grid simple)",
        "description": {
          "type": "doc",
          "version": 1,
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Contexto (para juniors): Mostrar categorías ayuda a los usuarios a explorar.\nObjetivo (qué y por qué): Crear una grid con 3 categorías con imagen y enlace al catálogo filtrado (texto).\nAlcance (límites del MVP): HTML + Tailwind; sin lógica de filtro real.\nPasos detallados (paso a paso):\n1) Crear sección con h2 y grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4.\n2) Cada card con bg-white p-4 rounded shadow e imagen con alt.\n3) Enlace Ver productos que lleve a pages/catalogo.html.\nCriterios de aceptación (claros y verificables, ≥3):\n- 3 tarjetas visibles con título, imagen y enlace.\n- Grid cambia columnas en sm y md.\n- Sin scroll horizontal en móvil.\nValidaciones y casos negativos (≥2, simples):\n- Evitar imágenes muy pesadas.\n- Alt debe describir la categoría.\nComprobación manual (cómo validar): Ver la grid en móvil y desktop y probar enlaces.\nNotas de accesibilidad (foco, ARIA mínima si aplica): Tarjetas accesibles con teclado si contienen enlaces.\nNotas responsive (Tailwind): gap y padding adecuados, p-4 md:p-6 si es necesario.\nDefinición de listo (DoD):\n- Código revisado\n- Pruebas manuales básicas pasan\n- Sin errores en consola\nResponsable sugerido: persona-4\nEstimación (horas): 2\nOrden sugerido (1..5 en su grupo): 01"
                }
              ]
            }
          ]
        },
        "labels": [
          "mvp",
          "area-landing",
          "grupo-team4",
          "persona-4",
          "order-01",
          "est-2h"
        ]
      }
    },

    {
      "fields": {
        "project": { "key": "ECOM" },
        "issuetype": { "name": "Task" },
        "summary": "PERSONA-4 | Ticket 2/5 | Catálogo: filtro visual por categoría (mostrar/ocultar con clases)",
        "description": {
          "type": "doc",
          "version": 1,
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Contexto (para juniors): Un filtro simple ayuda a explorar sin backend.\nObjetivo (qué y por qué): Botones que muestran/ocultan tarjetas según data-category con JS mínimo.\nAlcance (límites del MVP): JS básico y clases hidden.\nPasos detallados (paso a paso):\n1) Agregar botones Todas, Hombre, Mujer, Accesorios con data-filter.\n2) En tarjetas poner data-category con su valor.\n3) En JS, al click, añadir o quitar hidden en tarjetas que no coincidan.\nCriterios de aceptación (claros y verificables, ≥3):\n- Botón Todas muestra todas las tarjetas.\n- Botones por categoría ocultan las demás.\n- Sin recargas de página.\nValidaciones y casos negativos (≥2, simples):\n- Si no hay coincidencias, mostrar mensaje simple.\n- Evitar filtros que dejen todo oculto sin feedback.\nComprobación manual (cómo validar): Probar cada botón y observar cambios en el DOM.\nNotas de accesibilidad (foco, ARIA mínima si aplica): Botones con aria-pressed opcional y foco claro.\nNotas responsive (Tailwind): Controles en un contenedor flex-wrap gap-2 para móvil.\nDefinición de listo (DoD):\n- Código revisado\n- Pruebas manuales básicas pasan\n- Sin errores en consola\nResponsable sugerido: persona-4\nEstimación (horas): 2\nOrden sugerido (1..5 en su grupo): 02"
                }
              ]
            }
          ]
        },
        "labels": [
          "mvp",
          "area-catalogo",
          "grupo-team4",
          "persona-4",
          "order-02",
          "est-2h"
        ]
      }
    },

    {
      "fields": {
        "project": { "key": "ECOM" },
        "issuetype": { "name": "Task" },
        "summary": "PERSONA-4 | Ticket 3/5 | Carrito: página que lista ítems desde localStorage y totaliza",
        "description": {
          "type": "doc",
          "version": 1,
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Contexto (para juniors): El carrito vive en localStorage y se muestra en una tabla simple.\nObjetivo (qué y por qué): Leer localStorage, pintar ítems y calcular subtotal y total.\nAlcance (límites del MVP): JS básico en carrito.html.\nPasos detallados (paso a paso):\n1) Crear contenedor con títulos y una lista de ítems (nombre, precio, cantidad, subtotal).\n2) Leer la clave cart y generar filas con Tailwind (grid o flex) y clases border-b py-2.\n3) Calcular total y mostrarlo claramente.\nCriterios de aceptación (claros y verificables, ≥3):\n- Si el carrito está vacío, se muestra mensaje.\n- Los subtotales y el total se calculan correctamente.\n- No hay errores en consola al no existir cart.\nValidaciones y casos negativos (≥2, simples):\n- Manejar cantidades 0 o negativas corrigiendo a 1 o removiendo.\n- Si faltan campos, ignorar el ítem.\nComprobación manual (cómo validar): Agregar productos en catálogo, abrir carrito y verificar datos.\nNotas de accesibilidad (foco, ARIA mínima si aplica): Usar roles de tabla simples si se usa tabla; foco en botones.\nNotas responsive (Tailwind): En móvil usar grid-cols-2 y en md grid-cols-4 para los datos.\nDefinición de listo (DoD):\n- Código revisado\n- Pruebas manuales básicas pasan\n- Sin errores en consola\nResponsable sugerido: persona-4\nEstimación (horas): 3\nOrden sugerido (1..5 en su grupo): 03"
                }
              ]
            }
          ]
        },
        "labels": [
          "mvp",
          "area-carrito",
          "grupo-team4",
          "persona-4",
          "order-03",
          "est-3h"
        ]
      }
    },

    {
      "fields": {
        "project": { "key": "ECOM" },
        "issuetype": { "name": "Task" },
        "summary": "PERSONA-4 | Ticket 4/5 | Carrito: botones + y - para actualizar cantidad y total",
        "description": {
          "type": "doc",
          "version": 1,
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Contexto (para juniors): Cambiar cantidades modifica el total.\nObjetivo (qué y por qué): Añadir controles + y - que actualicen cantidad, subtotal y total en pantalla y en localStorage.\nAlcance (límites del MVP): JS básico.\nPasos detallados (paso a paso):\n1) Agregar botones con data-id para cada ítem.\n2) En click de + incrementar cantidad mínima 1; en - decrementar y si llega a 0, remover ítem.\n3) Guardar cambios en localStorage y refrescar los cálculos en el DOM.\nCriterios de aceptación (claros y verificables, ≥3):\n- Al pulsar + o - se actualiza la cantidad visible.\n- El total general cambia acorde.\n- localStorage refleja el nuevo estado.\nValidaciones y casos negativos (≥2, simples):\n- Evitar cantidades negativas.\n- Manejar ítems inexistentes sin romper.\nComprobación manual (cómo validar): Probar varios ítems, ajustar cantidades y verificar totales.\nNotas de accesibilidad (foco, ARIA mínima si aplica): Botones con aria-label Aumentar y Disminuir; foco visible.\nNotas responsive (Tailwind): Botones con tamaño adecuado en móvil (py-1 px-2) y md:py-2 md:px-3.\nDefinición de listo (DoD):\n- Código revisado\n- Pruebas manuales básicas pasan\n- Sin errores en consola\nResponsable sugerido: persona-4\nEstimación (horas): 2\nOrden sugerido (1..5 en su grupo): 04"
                }
              ]
            }
          ]
        },
        "labels": [
          "mvp",
          "area-carrito",
          "grupo-team4",
          "persona-4",
          "order-04",
          "est-2h"
        ]
      }
    },

    {
      "fields": {
        "project": { "key": "ECOM" },
        "issuetype": { "name": "Task" },
        "summary": "PERSONA-4 | Ticket 5/5 | Checkout: resumen de compra y pedido simulado (limpiar carrito)",
        "description": {
          "type": "doc",
          "version": 1,
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Contexto (para juniors): Mostramos un resumen y cerramos el flujo sin pagos reales.\nObjetivo (qué y por qué): Ver ítems, totales y datos del usuario; al confirmar, limpiar el carrito y mostrar mensaje final.\nAlcance (límites del MVP): JS básico y HTML simple.\nPasos detallados (paso a paso):\n1) Leer datos del formulario y del carrito y mostrarlos en una tarjeta.\n2) Botón Confirmar pedido con clases bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded.\n3) Al confirmar, limpiar localStorage y mostrar mensaje Gracias por tu compra.\nCriterios de aceptación (claros y verificables, ≥3):\n- Se listan ítems con cantidades y total.\n- Al confirmar se limpia el carrito.\n- Aparece mensaje final claro.\nValidaciones y casos negativos (≥2, simples):\n- Si no hay carrito, mostrar mensaje de vacío.\n- Evitar confirmar sin datos mínimos del formulario.\nComprobación manual (cómo validar): Llenar carrito, completar formulario, confirmar y verificar limpieza.\nNotas de accesibilidad (foco, ARIA mínima si aplica): Botón con foco visible; mensajes con role status para lectura.\nNotas responsive (Tailwind): Contenedor max-w-lg mx-auto con espaciado p-4 md:p-6.\nDefinición de listo (DoD):\n- Código revisado\n- Pruebas manuales básicas pasan\n- Sin errores en consola\nResponsable sugerido: persona-4\nEstimación (horas): 2\nOrden sugerido (1..5 en su grupo): 05"
                }
              ]
            }
          ]
        },
        "labels": [
          "mvp",
          "area-checkout",
          "grupo-team4",
          "persona-4",
          "order-05",
          "est-2h"
        ]
      }
    }
  ]
}
